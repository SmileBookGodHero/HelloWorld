package com.company.algorithm.mt.mt;

import java.util.Arrays;

/*https://www.nowcoder.com/practice/0b5ab6cc51804dd59f9988ad70d8c4a0?tpId=128&tags=&title=&difficulty=0&judgeStatus=0&rp=1*/
public class MT02 {
    public static void main(String[] args) {
        String a = "[[0,0,0,1],[0,0,1,0],[1,0,1,1],[0,0,0,0]],[[3,4],[4,4],[3,4]]";
        String b = a.replace('[', '{');
        String c = b.replace(']', '}');
        System.out.println(c);

        int[][] A = {{0, 0, 0, 1}, {0, 0, 1, 0}, {1, 0, 1, 1}, {0, 0, 0, 0}};
        int[][] f = {{3, 4}, {4, 4}, {3, 4}};

        printArray(A);
        printArray(f);


        //         [[0,1,0,0],[1,0,1,0],[1,1,0,0],[1,0,0,1]],[[2,3],[4,2],[2,3]]
        // [[0,0,0,1],[0,0,1,0],[1,0,1,1],[0,0,0,0]],[[3,4],[4,4],[3,4]]
        // [[0,0,0,1],[1,0,0,0],[0,1,1,1],[1,0,1,1]],[[3,1],[3,1],[1,4]]
        // [[0,1,1,1],[1,0,0,0],[0,1,1,1],[0,1,1,0]],[[1,3],[3,2],[4,1]]
        // [[0,0,1,0],[1,1,1,1],[0,1,1,0],[1,0,1,0]],[[1,2],[2,3],[3,4]]
        // [[0,1,0,1],[0,0,0,1],[1,0,1,0],[1,1,0,0]],[[1,1],[4,3],[2,2]]
        // [[1,1,0,1],[1,0,1,1],[0,1,0,1],[0,1,0,0]],[[3,1],[4,3],[1,3]]
        // [[1,0,1,1],[1,1,1,0],[1,1,0,0],[1,0,1,0]],[[2,2],[2,4],[4,2]]
        // [[1,0,0,0],[0,0,0,0],[0,0,0,1],[1,0,1,0]],[[4,1],[4,4],[2,2]]
        // [[1,0,0,1],[1,0,0,1],[0,1,0,1],[0,0,1,0]],[[1,3],[2,2],[3,2]]
        // [[0,1,1,0],[1,0,1,0],[1,1,0,1],[1,0,1,1]],[[3,2],[4,3],[4,1]]
        // [[1,1,0,0],[1,1,1,1],[0,1,0,1],[0,1,1,1]],[[4,2],[3,1],[2,1]]
        // [[1,0,0,0],[0,1,1,0],[0,0,0,1],[1,0,0,0]],[[4,2],[2,1],[3,1]]
        // [[0,1,0,1],[0,1,1,1],[0,1,1,0],[1,1,1,0]],[[4,2],[2,2],[3,3]]
        // [[0,1,0,0],[1,1,1,1],[0,0,1,0],[1,0,0,0]],[[4,1],[1,2],[2,4]]
        // [[0,0,1,0],[1,1,0,1],[1,1,0,0],[0,1,0,0]],[[2,1],[3,1],[3,1]]
        // [[0,1,1,0],[1,0,0,0],[1,0,1,1],[1,0,0,1]],[[4,2],[2,2],[2,4]]
        // [[1,1,1,1],[1,1,0,0],[0,0,1,0],[1,0,0,1]],[[4,1],[2,1],[4,3]]
        // [[1,0,1,0],[1,1,1,0],[0,0,1,1],[0,0,0,1]],[[4,3],[4,3],[2,3]]
        // [[1,1,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,1]],[[3,4],[4,4],[2,1]]
        // [[1,1,1,1],[0,1,1,1],[0,0,0,1],[0,1,1,1]],[[4,4],[2,4],[2,1]]
        // [[1,0,1,0],[1,1,1,1],[0,0,1,1],[1,0,1,0]],[[4,4],[1,4],[4,2]]
        // [[0,1,1,0],[0,1,0,0],[1,0,1,0],[1,1,1,0]],[[4,3],[3,1],[4,4]]
        // [[1,1,1,0],[0,1,0,1],[1,0,1,1],[0,0,1,1]],[[2,4],[4,4],[1,1]]
        // [[0,0,0,0],[0,0,1,1],[1,0,1,0],[1,0,0,1]],[[2,3],[3,4],[3,1]]
        // [[0,1,0,1],[0,0,0,1],[0,0,0,0],[1,1,1,1]],[[4,1],[3,4],[1,3]]
        // [[1,0,0,1],[1,0,0,1],[0,0,1,1],[0,0,1,1]],[[2,2],[3,2],[4,1]]
        // [[0,1,0,1],[1,0,1,0],[0,1,0,0],[1,0,1,0]],[[2,4],[1,1],[1,3]]
        // [[1,1,0,1],[0,0,1,0],[1,1,0,0],[0,1,1,0]],[[3,4],[3,2],[4,1]]
        // [[0,1,1,0],[1,0,0,0],[1,0,1,0],[1,1,1,0]],[[3,1],[2,4],[4,1]]


        //         [[0,1,0,0],[1,0,1,0],[1,0,0,0],[0,0,1,1]]
        // [[0,0,0,1],[0,0,1,0],[1,0,1,0],[0,0,1,0]]
        // [[0,0,1,1],[1,0,0,1],[0,1,1,1],[1,0,1,1]]
        // [[0,0,1,0],[1,1,1,0],[0,1,0,1],[0,1,1,0]]
        // [[1,0,1,0],[1,1,1,1],[0,1,1,0],[1,0,1,1]]
        // [[0,1,0,1],[0,0,1,1],[1,1,0,0],[1,0,0,1]]
        // [[1,0,0,0],[0,0,0,1],[0,0,1,1],[1,0,0,1]]
        // [[1,1,1,0],[0,1,1,0],[1,1,0,1],[0,0,0,0]]
        // [[1,1,0,0],[1,0,1,0],[1,1,0,0],[1,1,0,0]]
        // [[1,0,0,0],[0,1,0,1],[1,0,1,1],[0,1,1,0]]
        // [[0,1,1,0],[1,1,1,0],[1,1,0,1],[1,1,1,0]]
        // [[0,1,0,0],[0,0,1,1],[1,1,0,1],[0,1,0,1]]
        // [[0,0,0,0],[1,0,1,0],[1,0,0,1],[1,0,1,0]]
        // [[0,0,0,1],[1,1,1,1],[0,0,1,1],[0,1,1,0]]
        // [[1,1,1,1],[1,0,0,1],[1,0,1,1],[1,1,0,0]]
        // [[1,0,1,0],[1,0,0,1],[0,1,0,0],[0,1,0,0]]
        // [[0,0,1,1],[0,0,0,0],[1,0,1,0],[0,0,1,1]]
        // [[0,1,1,1],[1,0,0,0],[0,0,0,0],[1,0,0,0]]
        // [[1,0,0,0],[1,0,1,1],[0,0,0,1],[0,0,0,1]]
        // [[0,1,0,0],[0,0,0,1],[1,0,1,0],[0,0,0,0]]
        // [[0,1,1,0],[0,0,0,1],[1,0,0,1],[0,1,0,1]]
        // [[1,0,0,0],[1,1,1,0],[0,1,1,0],[0,0,1,0]]
        // [[0,1,1,0],[1,1,0,0],[1,1,0,1],[0,0,0,1]]
        // [[1,0,1,1],[1,1,1,1],[1,0,1,1],[0,0,0,1]]
        // [[0,0,1,0],[1,1,1,1],[1,1,1,0],[0,0,0,0]]
        // [[0,0,0,0],[0,0,1,0],[1,0,1,0],[1,0,1,0]]
        // [[1,1,0,1],[0,1,1,1],[0,1,0,1],[0,0,1,1]]
        // [[0,1,0,1],[0,0,1,0],[0,1,0,1],[1,0,1,0]]
        // [[1,1,0,1],[0,1,1,1],[1,1,0,0],[0,1,1,1]]
        // [[0,1,1,1],[0,0,1,0],[0,1,1,1],[0,0,1,0]]

        //         [[0,1,0,0],[1,0,1,0],[1,0,0,0],[0,0,1,1]]
        // [[0,0,0,1],[0,0,1,1],[1,0,1,0],[0,0,1,1]]
        // [[0,0,1,1],[1,0,0,1],[0,1,1,1],[1,0,1,1]]
        // [[0,0,1,0],[1,1,1,0],[0,1,0,1],[0,1,1,0]]
        // [[1,0,1,0],[1,1,1,0],[0,1,0,0],[1,0,1,0]]
        // [[0,1,0,1],[0,0,1,1],[1,1,0,0],[1,0,0,1]]
        // [[1,0,0,0],[0,0,0,1],[0,0,1,1],[1,0,0,1]]
        // [[1,1,1,0],[0,1,0,0],[1,1,0,0],[0,0,0,0]]
        // [[1,1,0,0],[1,0,1,0],[1,1,0,0],[1,1,0,0]]
        // [[1,0,0,0],[0,1,0,1],[1,0,1,1],[0,1,1,0]]
        // [[0,1,1,0],[1,1,1,0],[1,1,0,1],[1,1,1,0]]
        // [[0,1,0,0],[0,0,1,1],[1,1,0,1],[0,1,0,1]]
        // [[0,0,0,0],[1,0,1,0],[1,0,0,1],[1,0,1,0]]
        // [[0,0,0,1],[1,1,1,1],[0,0,1,1],[0,1,1,0]]
        // [[1,1,1,0],[1,0,1,1],[1,0,1,0],[1,1,0,0]]
        // [[1,0,1,0],[1,0,0,1],[0,1,0,0],[0,1,0,0]]
        // [[0,0,1,1],[0,0,1,0],[1,0,1,0],[0,0,1,1]]
        // [[0,1,1,1],[1,0,0,0],[0,0,0,0],[1,0,0,0]]
        // [[1,0,0,0],[1,0,1,1],[0,0,0,1],[0,0,0,1]]
        // [[0,1,0,0],[0,0,0,1],[1,0,1,0],[0,0,0,1]]
        // [[0,1,1,0],[0,0,0,1],[1,0,0,1],[0,1,0,1]]
        // [[1,0,0,0],[1,1,1,0],[0,1,1,0],[0,0,1,0]]
        // [[0,1,1,0],[1,1,0,0],[1,1,0,1],[0,0,0,1]]
        // [[1,0,1,0],[1,1,0,1],[1,0,1,1],[0,0,0,1]]
        // [[0,0,1,0],[1,1,1,1],[1,1,1,0],[0,0,0,0]]
        // [[0,0,0,0],[0,0,1,1],[1,0,1,0],[1,0,1,0]]
        // [[1,1,0,1],[0,1,1,1],[0,1,0,1],[0,0,1,1]]
        // [[0,1,0,0],[0,0,0,0],[0,1,0,1],[1,0,1,0]]
        // [[1,1,0,1],[0,1,1,1],[1,1,1,0],[0,1,1,1]]
        // [[0,1,1,1],[0,0,1,0],[0,1,1,0],[0,0,1,0]]

        int[][] res = flipChess(A, f);
        printArray(res);

        // [[0,0,0,1],[0,0,1,0],[1,0,1,0],[0,0,1,0]]
    }

    static void printArray(int[][] arr) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            System.out.println(Arrays.toString(arr[i]));
        }
    }

    public static int[][] flipChess(int[][] A, int[][] f) {
        // write code here

        int[][] res = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                res[i][j] = A[i][j];
            }
        }
        int n = f.length;
        for (int i = 0; i < n; i++) {
            int a = f[i][0];
            int b = f[i][1];
            if (a > 1 && a < 4 && b > 1 && b < 4) {
                res[a - 2][b - 1] = res[a - 2][b - 1] == 0 ? 1 : 0;
                res[a][b - 1] = res[a][b - 1] == 0 ? 1 : 0;
                res[a - 1][b - 2] = res[a - 1][b - 2] == 0 ? 1 : 0;
                res[a - 1][b] = res[a - 1][b] == 0 ? 1 : 0;
            }
            if (a == 1 && b == 1) {
                res[0][1] = res[0][1] == 0 ? 1 : 0;
                res[1][0] = res[1][0] == 0 ? 1 : 0;
            }

            if (a == 1 && b == 4) {
                res[0][2] = res[0][2] == 0 ? 1 : 0;
                res[1][3] = res[1][3] == 0 ? 1 : 0;
            }


            if (a == 4 && b == 1) {
                res[2][0] = res[2][0] == 0 ? 1 : 0;
                res[3][1] = res[3][1] == 0 ? 1 : 0;
            }

            if (a == 4 && b == 4) {
                res[2][3] = res[2][3] == 0 ? 1 : 0;
                res[3][2] = res[3][2] == 0 ? 1 : 0;
            }

            if (a == 1 && b > 1 && b < 4) {
                res[0][b - 2] = res[0][b - 2] == 0 ? 1 : 0;
                res[0][b] = res[0][b] == 0 ? 1 : 0;
                res[1][b - 1] = res[1][b - 1] == 0 ? 1 : 0;
            }

            if (a == 4 && b > 1 && b < 4) {
                res[3][b - 2] = res[3][b - 2] == 0 ? 1 : 0;
                res[3][b] = res[3][b] == 0 ? 1 : 0;
                res[2][b - 1] = res[2][b - 1] == 0 ? 1 : 0;
            }

            if (a > 1 && a < 4 && b == 1) {
                res[a - 2][0] = res[a - 2][0] == 0 ? 1 : 0;
                res[a][0] = res[a][0] == 0 ? 1 : 0;
                res[a - 1][1] = res[a - 1][1] == 0 ? 1 : 0;
            }


            if (a > 1 && a < 4 && b == 4) {
                res[a - 2][3] = res[a - 2][3] == 0 ? 1 : 0;
                res[a][3] = res[a][3] == 0 ? 1 : 0;
                res[a - 1][2] = res[a - 1][2] == 0 ? 1 : 0;
            }
        }
        return res;
    }
}
